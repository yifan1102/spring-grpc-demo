// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/earth/base/common/order_common.proto

// Protobuf Java Version: 3.25.3
package com.earth.base.common;

/**
 * <pre>
 *
 * 订单类型。表达了数字货币或其它资产交易中，支持的交易类型。
 * </pre>
 *
 * Protobuf enum {@code com.earth.base.common.OrderTypeEnum}
 */
public enum OrderTypeEnum
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   *--交易类型  0 -- 9, 999
   * 限价单
   * </pre>
   *
   * <code>LIMIT = 0;</code>
   */
  LIMIT(0),
  /**
   * <pre>
   *固定BASE数量的市价单
   * </pre>
   *
   * <code>MARKET_OF_BASE = 2;</code>
   */
  MARKET_OF_BASE(2),
  /**
   * <pre>
   *固定QUOTE数量的市价单
   * </pre>
   *
   * <code>MARKET_OF_QUOTE = 3;</code>
   */
  MARKET_OF_QUOTE(3),
  /**
   * <pre>
   *MAKER单
   * </pre>
   *
   * <code>LIMIT_MAKER = 4;</code>
   */
  LIMIT_MAKER(4),
  /**
   * <pre>
   *cancel On Match订单，用于做市, 仅用于提供行情
   * </pre>
   *
   * <code>COM = 5;</code>
   */
  COM(5),
  /**
   * <pre>
   *现价止损单，即计划委托单
   * </pre>
   *
   * <code>STOP_LIMIT = 6;</code>
   */
  STOP_LIMIT(6),
  /**
   * <pre>
   *只做本地成交的订单类型。 与LIMIT一样。 但在聚合场景中的时候，不在外部撮合
   * </pre>
   *
   * <code>LOCAL_ONLY = 7;</code>
   */
  LOCAL_ONLY(7),
  /**
   * <pre>
   * 特殊做市订单类型（下单不会锁余额）
   * </pre>
   *
   * <code>LIMIT_FREE = 8;</code>
   */
  LIMIT_FREE(8),
  /**
   * <pre>
   * 特殊做市订单类型（下单不会锁余额）
   * </pre>
   *
   * <code>LIMIT_MAKER_FREE = 9;</code>
   */
  LIMIT_MAKER_FREE(9),
  /**
   * <pre>
   * 普通止盈止损订单类型
   * </pre>
   *
   * <code>STOP = 10;</code>
   */
  STOP(10),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   *--交易类型  0 -- 9, 999
   * 限价单
   * </pre>
   *
   * <code>LIMIT = 0;</code>
   */
  public static final int LIMIT_VALUE = 0;
  /**
   * <pre>
   *固定BASE数量的市价单
   * </pre>
   *
   * <code>MARKET_OF_BASE = 2;</code>
   */
  public static final int MARKET_OF_BASE_VALUE = 2;
  /**
   * <pre>
   *固定QUOTE数量的市价单
   * </pre>
   *
   * <code>MARKET_OF_QUOTE = 3;</code>
   */
  public static final int MARKET_OF_QUOTE_VALUE = 3;
  /**
   * <pre>
   *MAKER单
   * </pre>
   *
   * <code>LIMIT_MAKER = 4;</code>
   */
  public static final int LIMIT_MAKER_VALUE = 4;
  /**
   * <pre>
   *cancel On Match订单，用于做市, 仅用于提供行情
   * </pre>
   *
   * <code>COM = 5;</code>
   */
  public static final int COM_VALUE = 5;
  /**
   * <pre>
   *现价止损单，即计划委托单
   * </pre>
   *
   * <code>STOP_LIMIT = 6;</code>
   */
  public static final int STOP_LIMIT_VALUE = 6;
  /**
   * <pre>
   *只做本地成交的订单类型。 与LIMIT一样。 但在聚合场景中的时候，不在外部撮合
   * </pre>
   *
   * <code>LOCAL_ONLY = 7;</code>
   */
  public static final int LOCAL_ONLY_VALUE = 7;
  /**
   * <pre>
   * 特殊做市订单类型（下单不会锁余额）
   * </pre>
   *
   * <code>LIMIT_FREE = 8;</code>
   */
  public static final int LIMIT_FREE_VALUE = 8;
  /**
   * <pre>
   * 特殊做市订单类型（下单不会锁余额）
   * </pre>
   *
   * <code>LIMIT_MAKER_FREE = 9;</code>
   */
  public static final int LIMIT_MAKER_FREE_VALUE = 9;
  /**
   * <pre>
   * 普通止盈止损订单类型
   * </pre>
   *
   * <code>STOP = 10;</code>
   */
  public static final int STOP_VALUE = 10;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static OrderTypeEnum valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static OrderTypeEnum forNumber(int value) {
    switch (value) {
      case 0: return LIMIT;
      case 2: return MARKET_OF_BASE;
      case 3: return MARKET_OF_QUOTE;
      case 4: return LIMIT_MAKER;
      case 5: return COM;
      case 6: return STOP_LIMIT;
      case 7: return LOCAL_ONLY;
      case 8: return LIMIT_FREE;
      case 9: return LIMIT_MAKER_FREE;
      case 10: return STOP;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<OrderTypeEnum>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      OrderTypeEnum> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<OrderTypeEnum>() {
          public OrderTypeEnum findValueByNumber(int number) {
            return OrderTypeEnum.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.earth.base.common.OrderCommonProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final OrderTypeEnum[] VALUES = values();

  public static OrderTypeEnum valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private OrderTypeEnum(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.earth.base.common.OrderTypeEnum)
}

