// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/earth/base/order/order.proto

// Protobuf Java Version: 3.25.3
package com.earth.base.order;

/**
 * Protobuf enum {@code com.earth.base.order.OrderStatusEnum}
 */
public enum OrderStatusEnum
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 订单已创建
   * </pre>
   *
   * <code>NEW = 0;</code>
   */
  NEW(0),
  /**
   * <pre>
   * 部分成交
   * </pre>
   *
   * <code>PARTIALLY_FILLED = 1;</code>
   */
  PARTIALLY_FILLED(1),
  /**
   * <pre>
   * 完全成交
   * </pre>
   *
   * <code>FILLED = 2;</code>
   */
  FILLED(2),
  /**
   * <pre>
   * Order Done for Day may be sent when a Day order is unfilled or partially filled at the end of the trading day and no further executions will be sent before the order is canceled
   * </pre>
   *
   * <code>DONE_FOR_DAY = 3;</code>
   */
  DONE_FOR_DAY(3),
  /**
   * <pre>
   * 已取消(手动撤销)
   * </pre>
   *
   * <code>CANCELED = 4;</code>
   */
  CANCELED(4),
  /**
   * <code>REPLACED = 5;</code>
   */
  REPLACED(5),
  /**
   * <pre>
   * 取消中
   * </pre>
   *
   * <code>PENDING_CANCEL = 6;</code>
   */
  PENDING_CANCEL(6),
  /**
   * <pre>
   * 已拒绝（系统拒绝）
   * </pre>
   *
   * <code>REJECTED = 8;</code>
   */
  REJECTED(8),
  /**
   * <code>SUSPENDED = 9;</code>
   */
  SUSPENDED(9),
  /**
   * <pre>
   * 保留字段
   * </pre>
   *
   * <code>PENDING_NEW = 10;</code>
   */
  PENDING_NEW(10),
  /**
   * <code>CALCULATED = 11;</code>
   */
  CALCULATED(11),
  /**
   * <pre>
   * Order expired may be sent when a Good Til Date (GTD) order reaches its expiration date or a Good Til Cancel (GTC) order reaches its maximum age. That maximum age may be broker-specific and even unspecified
   * </pre>
   *
   * <code>EXPIRED = 12;</code>
   */
  EXPIRED(12),
  /**
   * <code>ACCEPTED_FOR_BIDDING = 13;</code>
   */
  ACCEPTED_FOR_BIDDING(13),
  /**
   * <code>PENDING_REPLACE = 14;</code>
   */
  PENDING_REPLACE(14),
  /**
   * <pre>
   *管理员拒绝
   * </pre>
   *
   * <code>ADMIN_REJECTED = 15;</code>
   */
  ADMIN_REJECTED(15),
  /**
   * <pre>
   *时效性过期，取消
   * </pre>
   *
   * <code>EXPIRED_CANCELED = 16;</code>
   */
  EXPIRED_CANCELED(16),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 订单已创建
   * </pre>
   *
   * <code>NEW = 0;</code>
   */
  public static final int NEW_VALUE = 0;
  /**
   * <pre>
   * 部分成交
   * </pre>
   *
   * <code>PARTIALLY_FILLED = 1;</code>
   */
  public static final int PARTIALLY_FILLED_VALUE = 1;
  /**
   * <pre>
   * 完全成交
   * </pre>
   *
   * <code>FILLED = 2;</code>
   */
  public static final int FILLED_VALUE = 2;
  /**
   * <pre>
   * Order Done for Day may be sent when a Day order is unfilled or partially filled at the end of the trading day and no further executions will be sent before the order is canceled
   * </pre>
   *
   * <code>DONE_FOR_DAY = 3;</code>
   */
  public static final int DONE_FOR_DAY_VALUE = 3;
  /**
   * <pre>
   * 已取消(手动撤销)
   * </pre>
   *
   * <code>CANCELED = 4;</code>
   */
  public static final int CANCELED_VALUE = 4;
  /**
   * <code>REPLACED = 5;</code>
   */
  public static final int REPLACED_VALUE = 5;
  /**
   * <pre>
   * 取消中
   * </pre>
   *
   * <code>PENDING_CANCEL = 6;</code>
   */
  public static final int PENDING_CANCEL_VALUE = 6;
  /**
   * <pre>
   * 已拒绝（系统拒绝）
   * </pre>
   *
   * <code>REJECTED = 8;</code>
   */
  public static final int REJECTED_VALUE = 8;
  /**
   * <code>SUSPENDED = 9;</code>
   */
  public static final int SUSPENDED_VALUE = 9;
  /**
   * <pre>
   * 保留字段
   * </pre>
   *
   * <code>PENDING_NEW = 10;</code>
   */
  public static final int PENDING_NEW_VALUE = 10;
  /**
   * <code>CALCULATED = 11;</code>
   */
  public static final int CALCULATED_VALUE = 11;
  /**
   * <pre>
   * Order expired may be sent when a Good Til Date (GTD) order reaches its expiration date or a Good Til Cancel (GTC) order reaches its maximum age. That maximum age may be broker-specific and even unspecified
   * </pre>
   *
   * <code>EXPIRED = 12;</code>
   */
  public static final int EXPIRED_VALUE = 12;
  /**
   * <code>ACCEPTED_FOR_BIDDING = 13;</code>
   */
  public static final int ACCEPTED_FOR_BIDDING_VALUE = 13;
  /**
   * <code>PENDING_REPLACE = 14;</code>
   */
  public static final int PENDING_REPLACE_VALUE = 14;
  /**
   * <pre>
   *管理员拒绝
   * </pre>
   *
   * <code>ADMIN_REJECTED = 15;</code>
   */
  public static final int ADMIN_REJECTED_VALUE = 15;
  /**
   * <pre>
   *时效性过期，取消
   * </pre>
   *
   * <code>EXPIRED_CANCELED = 16;</code>
   */
  public static final int EXPIRED_CANCELED_VALUE = 16;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static OrderStatusEnum valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static OrderStatusEnum forNumber(int value) {
    switch (value) {
      case 0: return NEW;
      case 1: return PARTIALLY_FILLED;
      case 2: return FILLED;
      case 3: return DONE_FOR_DAY;
      case 4: return CANCELED;
      case 5: return REPLACED;
      case 6: return PENDING_CANCEL;
      case 8: return REJECTED;
      case 9: return SUSPENDED;
      case 10: return PENDING_NEW;
      case 11: return CALCULATED;
      case 12: return EXPIRED;
      case 13: return ACCEPTED_FOR_BIDDING;
      case 14: return PENDING_REPLACE;
      case 15: return ADMIN_REJECTED;
      case 16: return EXPIRED_CANCELED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<OrderStatusEnum>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      OrderStatusEnum> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<OrderStatusEnum>() {
          public OrderStatusEnum findValueByNumber(int number) {
            return OrderStatusEnum.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.earth.base.order.OrderServiceProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final OrderStatusEnum[] VALUES = values();

  public static OrderStatusEnum valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private OrderStatusEnum(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.earth.base.order.OrderStatusEnum)
}

